/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$hamburger-close-name: 'hamburger-close';
$hamburger-close-x: 0px;
$hamburger-close-y: 54px;
$hamburger-close-offset-x: 0px;
$hamburger-close-offset-y: -54px;
$hamburger-close-width: 36px;
$hamburger-close-height: 36px;
$hamburger-close-total-width: 141px;
$hamburger-close-total-height: 550px;
$hamburger-close-image: '../img/sprite.png';
$hamburger-close: (0px, 54px, 0px, -54px, 36px, 36px, 141px, 550px, '../img/sprite.png', 'hamburger-close', );
$icon-list1-name: 'icon-list1';
$icon-list1-x: 0px;
$icon-list1-y: 302px;
$icon-list1-offset-x: 0px;
$icon-list1-offset-y: -302px;
$icon-list1-width: 58px;
$icon-list1-height: 108px;
$icon-list1-total-width: 141px;
$icon-list1-total-height: 550px;
$icon-list1-image: '../img/sprite.png';
$icon-list1: (0px, 302px, 0px, -302px, 58px, 108px, 141px, 550px, '../img/sprite.png', 'icon-list1', );
$icon-list2-name: 'icon-list2';
$icon-list2-x: 0px;
$icon-list2-y: 191px;
$icon-list2-offset-x: 0px;
$icon-list2-offset-y: -191px;
$icon-list2-width: 99px;
$icon-list2-height: 91px;
$icon-list2-total-width: 141px;
$icon-list2-total-height: 550px;
$icon-list2-image: '../img/sprite.png';
$icon-list2: (0px, 191px, 0px, -191px, 99px, 91px, 141px, 550px, '../img/sprite.png', 'icon-list2', );
$icon-list3-name: 'icon-list3';
$icon-list3-x: 0px;
$icon-list3-y: 430px;
$icon-list3-offset-x: 0px;
$icon-list3-offset-y: -430px;
$icon-list3-width: 141px;
$icon-list3-height: 120px;
$icon-list3-total-width: 141px;
$icon-list3-total-height: 550px;
$icon-list3-image: '../img/sprite.png';
$icon-list3: (0px, 430px, 0px, -430px, 141px, 120px, 141px, 550px, '../img/sprite.png', 'icon-list3', );
$icon-quote-name: 'icon-quote';
$icon-quote-x: 0px;
$icon-quote-y: 110px;
$icon-quote-offset-x: 0px;
$icon-quote-offset-y: -110px;
$icon-quote-width: 75px;
$icon-quote-height: 61px;
$icon-quote-total-width: 141px;
$icon-quote-total-height: 550px;
$icon-quote-image: '../img/sprite.png';
$icon-quote: (0px, 110px, 0px, -110px, 75px, 61px, 141px, 550px, '../img/sprite.png', 'icon-quote', );
$icon-upload-name: 'icon-upload';
$icon-upload-x: 0px;
$icon-upload-y: 0px;
$icon-upload-offset-x: 0px;
$icon-upload-offset-y: 0px;
$icon-upload-width: 35px;
$icon-upload-height: 34px;
$icon-upload-total-width: 141px;
$icon-upload-total-height: 550px;
$icon-upload-image: '../img/sprite.png';
$icon-upload: (0px, 0px, 0px, 0px, 35px, 34px, 141px, 550px, '../img/sprite.png', 'icon-upload', );
$spritesheet-width: 141px;
$spritesheet-height: 550px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($hamburger-close, $icon-list1, $icon-list2, $icon-list3, $icon-quote, $icon-upload, );
$spritesheet: (141px, 550px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
